%%  Sentence is a noun phrase followed by a verb phrase.
%%   NOTE:  xS, xNP and xVP are all PREDICATES.
%%          (Each has two hidden arguments.) 

% xS --> xNP, xVP.

%% Building noun phrases...

% xNP --> xPropNoun.
% xNP --> xDet, xNoun.

xNP(Tense) --> xPropNoun(Tense).
xNP(Tense) --> xDet(Tense), xNoun(Tense).

%% Some words...

xDet(presentS) --> [a].
xDet(presentS) --> [the].
xDet(presentP) --> [some].
xDet(presentP) --> [the].
xDet(pastS) --> [a].
xDet(pastS) --> [the].
xDet(pastP) --> [some].
xDet(pastP) --> [the].

xNoun(presentS) --> [boy].
xNoun(presentP) --> [boys].
xNoun(pastS) --> [boy].
xNoun(pastP) --> [boys].

xNoun(presentS) --> [girl].
xNoun(presentP) --> [girls].
xNoun(pastS) --> [girl].
xNoun(pastP) --> [girls].

xPropNoun(presentS) --> [luke, hunsberger].
xPropNoun(presentP) --> [barack, hussein, obamas].
xPropNoun(pastS) --> [luke, hunsberger].
xPropNoun(pastP) --> [barack, hussein, obamas].


%% Building verb phrases...

% xVP --> xIVerb.
% xVP --> xTVerb, xNP.
% xVP --> xIVerb, xIObj.
xIObj(Tense) --> xPrep, xNP(Tense).

%% Some more words...

% xIVerb --> [runs].

xPrep --> [to].
xPrep --> [from].

% xTVerb --> [trips].

%% Try this query:  xS(Ss,[]) <------ i.e., Ss is the list of words
%%                                    [] is the rest of the words...

%% Or, better yet, define a wrapper predicate:

%% xxxx(Ss) -- holds if Ss is a sentence accepted by the above grammar

xxxx(Ss) :- xS(Ss,[]).  %% <--- Notice that we are supplying the
                        %%      two (usually hidden) inputs to xS.
			%%      Must do this when using standard Prolog
			%%      syntax (i.e., :- )

%% Try this query:  xxxx([A,B,C,D]).


%% =======================================================
%%  Adding extra arguments to the predicates
%% =======================================================
%%  For example, below we add an extra TENSE argument.
%%  The Tense variable can have values such as present,
%%  past, infinitive, etc.

%%  A sentence is formed by a noun phrase followed by a verb phrase.
%%  The tense of the verb phrase must be the same as the tense of
%%  the sentence.

%xS(Tense) --> xNP, xVP(Tense).
xS(Tense) --> xNP(Tense), xVP(Tense).


%%  In the above, Tense is the *first* arugment of the "xS" predicate.
%%  The two hidden arguments are the *second* and *third* arguments.

%%  Building verb phrases using a Tense variable to ensure that
%%  the tenses of the parts match the tense of the whole.

xVP(Tense) --> xIVerb(Tense).
xVP(Tense) --> xTVerb(Tense), xNP(Tense).
xVP(Tense) --> xIVerb(Tense), xIObj(Tense).

%%  Individual words.  Here, the tense of a given word is
%%  specified by a constant (e.g., past or present).

xIVerb(presentS) --> [runs].
xIVerb(presentP) --> [run].
xIVerb(inf) --> [run].
xIVerb(pastS) --> [ran].
xIVerb(pastP) --> [ran].
xTVerb(presentS) --> [trips].
xTVerb(presentP) --> [trip].
xTVerb(inf) --> [trip].
xTVerb(pastS) --> [tripped].
xTVerb(pastP) --> [tripped].


%%  xHelper:  holds for the helper verbs "does", "did", etc.

xHelper(presentS) --> [does].
xHelper(pastS) --> [did].


%%  Forming questions from a sentence...
%%  If S(present) = NP, VP(present) is a sentence then 
%%   Q = [does], NP, VP(infinitive) is a corresponding question.

xQ(Tense) --> xHelper(Tense), xNP(Tense), xVP(inf).

%% Try:  xQ(present, Q, []). <--- don't forget the diff lists!

%% Or, better yet, define a wrapper predicate:
%%  xQQQ(Ss) holds if Ss is a question accepted by the above grammar.
%%  Notice that xQ is given its three arguments:  the 
%%  Tense argument followed by the two (normally hidden) arguments
%%  representing the big and little parts of a difference list:

xQQQ(Ss,Tense) :- xQ(Tense, Ss, []). 

%%  Try this query:  xQQQ([A,B,C,D,E],past).  <--- arbitrary five-word 
%%                                                 question in past tense.
