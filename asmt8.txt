%%  diffListConvert(Xs,Ys,Regular)
%% ---------------------------------------
%%    holds if Xs/Ys is a difference list
%%    representation of Regular

%%  Base Case: empty list

diffListConvert(Ys,Ys,[]).

%%  Recursive Case:  non-empty list

diffListConvert([X|Big], Little, [X|Regular])
  :- diffListConvert(Big,Little,Regular).

%%  isLetter
%% ----------------------------
%%  INPUT:  C, a number
%% ----------------------------
%%  isLetter(C) holds if C is an ASCII code for a letter 
%%  (either from 'a' to 'z', or from 'A' to 'Z').
%%  NOTE:  =< and >= work well on ASCII codes (i.e., numbers).

%%  Case 1:  C is the code for a lower-case letter
isLetter(C) :-  
  char_code(a,Ca),
  char_code(z,Cz),
  C >= Ca,
  C =< Cz.

%%  Case 2:  C is the code for an upper-case letter
isLetter(C) :-
  char_code('A',CA),
  char_code('Z',CZ),
  C >= CA,
  C =< CZ.


%%  isNumeral
%% ----------------------------
%%  INPUT:  C, a number
%% ----------------------------
%%  isLetter(C) holds if C is an ASCII code for a numeral 
%%  (from '0' to '9').

isNumeral(C) :-  
  char_code('0',Cz),
  char_code('9',Cn),
  C >= Cz,
  C =< Cn.


%%  dl_string_to_number(Big,Little,Numby).
%% -----------------------------------------------------
%%  Holds if the Difference List Big/Little is a String
%%  representation of the Prolog number Numby.

dl_string_to_number(Big,Little,Numby) 
  :- diffListConvert(Big,Little,Listy),
     number_codes(Numby,Listy).


%%  dl_string_to_atom(Big,Little,Adam).
%% -----------------------------------------------------
%%  Holds if the Difference List Big/Little is a String
%%  representation of the Prolog atom Adam.

dl_string_to_atom(Big,Little,Adam)
  :- diffListConvert(Big,Little,Listy),
     atom_codes(Adam,Listy).



%%---------------------------------------------------------------

scheme --> bool.
scheme --> num.
scheme --> id.
scheme --> null.


true --> "#t".
false --> "#f".
bool --> true.
bool --> false.

trueParse(true,Xs,Ys) :-
  true(Xs,Ys).
falseParse(false,Xs,Ys) :-
  false(Xs,Ys).
boolParse(bool(Boolean),Xs,Ys) :-
  false(Xs,Ys),
  falseParse(Boolean,Xs,Ys).
boolParse(bool(Boolean),Xs,Ys) :-
  true(Xs,Ys),
  trueParse(Boolean,Xs,Ys).


numOne --> [N], {isNumeral(N)}.
num --> numOne.
num --> numOne, num.

numParse(num(Atnum),Xs,Ys) :-
  num(Xs,Ys),
  dl_string_to_number(Xs,Ys,Atnum).


idOne --> [L], {isLetter(L)}.
id --> idOne.
id --> idOne, id.

idParse(id(Atid),Xs,Ys) :-
  id(Xs,Ys),
  dl_string_to_atom(Xs,Ys,Atid).

listSingle --> "(", scheme, ")".


listContents(Contents,Xs,Ys) :-
  diffListConvert(Xs,Ys,[40|Rest]),
  diffListConvert(Rest,")",Contents).

listSingleParse(cons(Item,null), Xs, Ys) :-
  listSingle(Xs,Ys),
  listContents(Contents,Xs,Ys),
  allParse(Item,Contents,"").


null --> "()".
nullParse(null,Xs,Ys) :-
  null(Xs,Ys).

allParse(P, Xs, Ys) :-
  bool(Xs,Ys),
  boolParse(P,Xs,Ys).

allParse(P, Xs, Ys) :-
  null(Xs,Ys),
  nullParse(P,Xs,Ys).

allParse(P, Xs, Ys) :-
  id(Xs,Ys),
  idParse(P,Xs,Ys).
  
allParse(P, Xs, Ys) :-
  num(Xs,Ys),
  numParse(P,Xs,Ys).
  
allParse(P, Xs, Ys) :-
  listSingle(Xs,Ys),
  listParse(P,Xs,Ys).
