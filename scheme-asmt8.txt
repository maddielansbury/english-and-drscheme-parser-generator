%%=============================%%
%% CMPU-245, Spring 2016       %
%% Asmt. 8                     %
%% Macall McQueen &            %
%% Madeline Lansbury           %
%%=============================%%

%%====================%%
%%      SCHEME        %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% scheme(Tree) holds if Big/Little represents a double quoted string
%%  containing a valid Scheme expression, and Tree is the corresponding
%%  parse tree.
%% ----------------------------------------------------------------------- %%

scheme(Tree) --> bool(Tree).
scheme(Tree) --> num(Tree).
scheme(Tree) --> id(Tree).
scheme(Tree) --> null(Tree).
scheme(Tree) --> "(", list(Tree).



%%====================%%
%%        BOOL        %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% bool(Tree) holds if Big/Little represents a double quoted string
%%  containing a Scheme boolean (#t or #f), and Tree is the corresponding
%%  parse tree of the form bool(true) when Big/Little is "#t" and
%%  bool(false) when Big/Little is "#f".
%% ----------------------------------------------------------------------- %%

bool(bool(true)) --> "#t".
bool(bool(false)) --> "#f".


%%====================%%
%%        NUM         %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% num(Tree,Big,Little) holds if Big/Little represents a double quoted string
%%  containing a number defined by nums, and Tree is the corresponding
%%  parse tree of the form num(N) where N is the number in atom form.
%% ----------------------------------------------------------------------- %%

num(num(Atnum),Big,Little) :-
  nums(Big,Little),
  dl_string_to_number(Big,Little,Atnum).


%% digit(Big,Little) -- holds if calling isNumeral on the first element of
%%                       Big/Little holds.

digit --> [N], {isNumeral(N)}.


%% nums(Big,Little) -- holds if Big/Little is a list of one or more digits.

nums --> digit.
nums --> digit, nums.



%%====================%%
%%         ID         %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% id(Tree,Big,Little) holds if Big/Little represents a double quoted string
%%  containing an identifier defined by ids, and Tree is the corresponding
%%  parse tree of the form id(L) where L is the identifier in atom form.
%% ----------------------------------------------------------------------- %%

id(id(Atid),Xs,Ys) :-
  ids(Xs,Ys),
  dl_string_to_atom(Xs,Ys,Atid).


%% letter(Big,Little) -- holds if calling isLetter on the first element of
%%                        Big/Little holds.
letter --> [L], {isLetter(L)}.


%% ids(Big,Little) -- holds if Big/Little is a list of one or more letters.
ids --> letter.
ids --> letter, ids.


%%====================%%
%%        NULL        %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% null(Tree,Big,Little) holds if Big/Little represents a double quoted
%%  string containing an empty list (), and Tree is the corresponding
%%  parse tree of the form null.
%% ----------------------------------------------------------------------- %%

null(null) --> "()".


%%====================%%
%%      WS/WSOPT      %
%%====================%%-------------------------------------------------- %%

%% ws(Big,Little) -- holds if Big/Little is a list of one or more spaces.
ws --> " ".
ws --> " ", ws.

%% wsOpt(Big,Little) -- holds if Big/Little is a list of zero or more spaces.
wsOpt --> "".
wsOpt --> ws.


%%====================%%
%%      LISTITEM      %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% listItem(Tree) holds if Big/Little represents a double quoted string
%%  containing a valid Scheme item followed by whitespace or a right paren,
%%  and Tree is the corresponding parse tree of the form cons(T, null) when
%%  there is a right paren (where T is the parse tree of the Scheme item),
%%  or T otherwise. 
%% ----------------------------------------------------------------------- %%

listItem(Tree) --> wsOpt, scheme(Tree), ws.
listItem(cons(Tree, null)) --> wsOpt, scheme(Tree), wsOpt, ")".



%%====================%%
%%        LIST        %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% list(Tree) holds if Big/Little represents a double quoted string
%%  containing one or more listItems, and Tree is the corresponding parse
%%  tree of the form cons(T, RT) where T is the parse tree of the first
%%  listItem and RT is the parse tree for the rest of the list.
%% ----------------------------------------------------------------------- %%

list(Tree) --> listItem(Tree).
list(cons(Tree,RTree)) --> listItem(Tree), list(RTree).



%%====================%%
%%     EXPRWRAPPER    %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         String, a double-quoted string (or list of char codes).
%% -------
%% expr(Tree) holds if Big/Little represents a double quoted string
%%  containing a, and Tree is the corresponding parse
%%  tree of the form cons(T, RT) where T is the parse tree of the first
%%  listItem and RT is the parse tree for the rest of the list.
%% ----------------------------------------------------------------------- %%

exprWrapper(Tree,String) :- scheme(Tree,String,[]).



%%====================%%
%%       HELPERS      %
%%====================%%-------------------------------------------------- %%

%%  diffListConvert(Xs,Ys,Regular)
%% ---------------------------------------
%%    holds if Xs/Ys is a difference list
%%    representation of Regular

%%  Base Case: empty list
diffListConvert(Ys,Ys,[]).

%%  Recursive Case:  non-empty list
diffListConvert([X|Big], Little, [X|Regular])
  :- diffListConvert(Big,Little,Regular).

%%  isLetter
%% ----------------------------
%%  INPUT:  C, a number
%% ----------------------------
%%  isLetter(C) holds if C is an ASCII code for a letter 
%%  (either from 'a' to 'z', or from 'A' to 'Z').
%%  NOTE:  =< and >= work well on ASCII codes (i.e., numbers).

%%  Case 1:  C is the code for a lower-case letter
isLetter(C) :-  
  char_code(a,Ca),
  char_code(z,Cz),
  C >= Ca,
  C =< Cz.

%%  Case 2:  C is the code for an upper-case letter
isLetter(C) :-
  char_code('A',CA),
  char_code('Z',CZ),
  C >= CA,
  C =< CZ.


%%  isNumeral
%% ----------------------------
%%  INPUT:  C, a number
%% ----------------------------
%%  isLetter(C) holds if C is an ASCII code for a numeral 
%%  (from '0' to '9').

isNumeral(C) :-  
  char_code('0',Cz),
  char_code('9',Cn),
  C >= Cz,
  C =< Cn.


%%  dl_string_to_number(Big,Little,Numby).
%% -----------------------------------------------------
%%  Holds if the Difference List Big/Little is a String
%%  representation of the Prolog number Numby.

dl_string_to_number(Big,Little,Numby) 
  :- diffListConvert(Big,Little,Listy),
     number_codes(Numby,Listy).


%%  dl_string_to_atom(Big,Little,Adam).
%% -----------------------------------------------------
%%  Holds if the Difference List Big/Little is a String
%%  representation of the Prolog atom Adam.

dl_string_to_atom(Big,Little,Adam)
  :- diffListConvert(Big,Little,Listy),
     atom_codes(Adam,Listy).
