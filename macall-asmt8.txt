%%  A sentence is formed by a noun phrase followed by a verb phrase.
%%  The tense of the verb phrase must be the same as the tense of
%%  the sentence.

xS(Tense, Num, Person) --> xNP(Tense, Num, Person), xVP(Tense, Num, Person).

%%  In the above, Tense is the *first* arugment of the "xS" predicate.
%%  The two hidden arguments are the *second* and *third* arguments.

%% Building noun phrases...

xNP(Tense, Num, Person) --> xPropNoun(Tense, Num, Person).
xNP(Tense, Num, Person) --> xDet(Tense, Num, Person), xNoun(Tense, Num, Person).
xNP(Tense, Num, Person) --> xPronoun(Tense, Num, Person).

%%  Building verb phrases using a Tense variable to ensure that
%%  the tenses of the parts match the tense of the whole.

xIObj(Tense, Num, Person) --> xPrep, xNP(Tense, Num, Person).
xVP(Tense, Num, Person) --> xIVerb(Tense, Num, Person).
xVP(Tense, Num, Person) --> xTVerb(Tense, Num, Person), xNP(Tense, Num, Person).
xVP(Tense, Num, Person) --> xIVerb(Tense, Num, Person), xIObj(Tense, Num, Person).

%%--------------------------------------------------------------------------

%% Try this query:  xS(Ss,[]) <------ i.e., Ss is the list of words
%%                                    [] is the rest of the words...

%% Or, better yet, define a wrapper predicate:

%% xxxx(Ss) -- holds if Ss is a sentence accepted by the above grammar

xxxx(Ss) :- xS(Ss,[]).  %% <--- Notice that we are supplying the
                        %%      two (usually hidden) inputs to xS.
			%%      Must do this when using standard Prolog
			%%      syntax (i.e., :- )

%% Try this query:  xxxx([A,B,C,D]).

%%--------------------------------------------------------------------------

%%  Forming questions from a sentence...
%%  If S(present) = NP, VP(present) is a sentence then 
%%   Q = [does], NP, VP(infinitive) is a corresponding question.

xQ(Tense, Num, Person) --> xHelper(Tense, Num, Person), xNP(Tense, Num, Person), xVP(inf).

%% Try:  xQ(present, Q, []). <--- don't forget the diff lists!

%% Or, better yet, define a wrapper predicate:
%%  xQQQ(Ss) holds if Ss is a question accepted by the above grammar.
%%  Notice that xQ is given its three arguments:  the 
%%  Tense argument followed by the two (normally hidden) arguments
%%  representing the big and little parts of a difference list:

xQQQ(Ss,Tense, Num, Person) :- xQ(Tense, Num, Person, Ss, []). 

%%  Try this query:  xQQQ([A,B,C,D,E],past).  <--- arbitrary five-word 
%%                                                 question in past tense.

%% xS(D, E, F, G, []). how to generate a random sentence

%%--------------------------------------------------------------------------

%% Some words...

xDet(_, singular, third) --> [a].
xDet(_, _, third) --> [the].
xDet(_, plural, third) --> [some].

xNoun(_, singular, third) --> [boy].
xNoun(_, plural, third) --> [boys].

xNoun(_, singular, third) --> [girl].
xNoun(_, plural, third) --> [girls].

xPropNoun(_, singular, third) --> [luke, hunsberger].
xPropNoun(_, plural, third) --> [luke, hunsbergers].
xPropNoun(_, singular, third) --> [barack, hussein, obama].
xPropNoun(_, plural, third) --> [barack, hussein, obamas].

xPronoun(_, _, second) --> [you].

%% Some more words...

xPrep --> [to].
xPrep --> [from].

%%  Individual words.  Here, the tense of a given word is
%%  specified by a constant (e.g., past or present).

% xIVerb(inf) --> [run].
xIVerb(present, singular, third) --> [runs].
xIVerb(present, plural, _) --> [run].
xIVerb(past, _, third) --> [ran].

% xTVerb(inf) --> [trip].
xTVerb(present, singular, third) --> [trips].
xTVerb(present, plural, third) --> [trip].
xTVerb(past, _, third) --> [tripped].

%%  xHelper:  holds for the helper verbs "does", "did", etc.

xHelper(presentS) --> [does].
xHelper(presentP) --> [do].
xHelper(pastS) --> [did].
xHelper(pastP) --> [did].
