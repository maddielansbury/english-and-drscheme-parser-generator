%%=============================%%
%% CMPU-245, Spring 2016       %
%% Asmt. 8                     %
%% Macall McQueen &            %
%% Madeline Lansbury           %
%%=============================%%

%=============%%
%% PROBLEM 1.
%%%%==============================%

%%====================%%
%%      SCHEME        %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% scheme(Tree) holds if Big/Little represents a double quoted string
%%  containing a valid Scheme expression, and Tree is the corresponding
%%  parse tree.
%% ----------------------------------------------------------------------- %%

scheme(Tree) --> bool(Tree).
scheme(Tree) --> num(Tree).
scheme(Tree) --> id(Tree).
scheme(Tree) --> null(Tree).
scheme(Tree) --> "(", list(Tree).



%%====================%%
%%        BOOL        %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% bool(Tree) holds if Big/Little represents a double quoted string
%%  containing a Scheme boolean (#t or #f), and Tree is the corresponding
%%  parse tree of the form bool(true) when Big/Little is "#t" and
%%  bool(false) when Big/Little is "#f".
%% ----------------------------------------------------------------------- %%

bool(bool(true)) --> "#t".
bool(bool(false)) --> "#f".


%%====================%%
%%        NUM         %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% num(Tree,Big,Little) holds if Big/Little represents a double quoted string
%%  containing a number defined by nums, and Tree is the corresponding
%%  parse tree of the form num(N) where N is the number in atom form.
%% ----------------------------------------------------------------------- %%

num(num(Atnum),Big,Little) :-
  nums(Big,Little),
  dl_string_to_number(Big,Little,Atnum).


%% digit(Big,Little) -- holds if calling isNumeral on the first element of
%%                       Big/Little holds.

digit --> [N], {isNumeral(N)}.


%% nums(Big,Little) -- holds if Big/Little is a list of one or more digits.

nums --> digit.
nums --> digit, nums.



%%====================%%
%%         ID         %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% id(Tree,Big,Little) holds if Big/Little represents a double quoted string
%%  containing an identifier defined by ids, and Tree is the corresponding
%%  parse tree of the form id(L) where L is the identifier in atom form.
%% ----------------------------------------------------------------------- %%

id(id(Atid),Xs,Ys) :-
  ids(Xs,Ys),
  dl_string_to_atom(Xs,Ys,Atid).


%% letter(Big,Little) -- holds if calling isLetter on the first element of
%%                        Big/Little holds.
letter --> [L], {isLLetter(L)}.


%% ids(Big,Little) -- holds if Big/Little is a list of one or more letters.
ids --> letter.
ids --> letter, ids.


%%====================%%
%%        NULL        %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% null(Tree,Big,Little) holds if Big/Little represents a double quoted
%%  string containing an empty list (), and Tree is the corresponding
%%  parse tree of the form null.
%% ----------------------------------------------------------------------- %%

null(null) --> "()".


%%====================%%
%%      WS/WSOPT      %
%%====================%%-------------------------------------------------- %%

%% ws(Big,Little) -- holds if Big/Little is a list of one or more spaces.
ws --> " ".
ws --> " ", ws.

%% wsOpt(Big,Little) -- holds if Big/Little is a list of zero or more spaces.
wsOpt --> "".
wsOpt --> ws.


%%====================%%
%%      LISTITEM      %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% listItem(Tree) holds if Big/Little represents a double quoted string
%%  containing a valid Scheme item followed by whitespace or a right paren,
%%  and Tree is the corresponding parse tree of the form cons(T, null) when
%%  there is a right paren (where T is the parse tree of the Scheme item),
%%  or T otherwise. 
%% ----------------------------------------------------------------------- %%

listItem(Tree) --> wsOpt, scheme(Tree), ws.
listItem(cons(Tree, null)) --> wsOpt, scheme(Tree), wsOpt, ")".



%%====================%%
%%        LIST        %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         Big, Little, the two parts of a difference list.
%% -------
%% list(Tree) holds if Big/Little represents a double quoted string
%%  containing one or more listItems, and Tree is the corresponding parse
%%  tree of the form cons(T, RT) where T is the parse tree of the first
%%  listItem and RT is the parse tree for the rest of the list.
%% ----------------------------------------------------------------------- %%

list(Tree) --> listItem(Tree).
list(cons(Tree,RTree)) --> listItem(Tree), list(RTree).



%%====================%%
%%     EXPRWRAPPER    %
%%====================%%-------------------------------------------------- %%
%% INPUTS: Tree, a parse tree.
%%         String, a double-quoted string (or list of char codes).
%% -------
%% expr(Tree) holds if Big/Little represents a double quoted string
%%  containing a, and Tree is the corresponding parse
%%  tree of the form cons(T, RT) where T is the parse tree of the first
%%  listItem and RT is the parse tree for the rest of the list.
%% ----------------------------------------------------------------------- %%

exprWrapper(Tree,String) :- scheme(Tree,String,[]).



%%====================%%
%%       HELPERS      %
%%====================%%-------------------------------------------------- %%

%%  diffListConvert(Xs,Ys,Regular)
%% ---------------------------------------
%%    holds if Xs/Ys is a difference list
%%    representation of Regular

%%  Base Case: empty list
diffListConvert(Ys,Ys,[]).

%%  Recursive Case:  non-empty list
diffListConvert([X|Big], Little, [X|Regular])
  :- diffListConvert(Big,Little,Regular).

%%  isLLetter
%% ----------------------------
%%  INPUT:  C, a number
%% ----------------------------
%%  isLLetter(C) holds if C is an ASCII code for a lowercase letter 
%%  (from 'a' to 'z').

isLLetter(C) :-  
  char_code(a,Ca),
  char_code(z,Cz),
  C >= Ca,
  C =< Cz.


%%  isNumeral
%% ----------------------------
%%  INPUT:  C, a number
%% ----------------------------
%%  isLetter(C) holds if C is an ASCII code for a numeral 
%%  (from '0' to '9').

isNumeral(C) :-  
  char_code('0',Cz),
  char_code('9',Cn),
  C >= Cz,
  C =< Cn.


%%  dl_string_to_number(Big,Little,Numby).
%% -----------------------------------------------------
%%  Holds if the Difference List Big/Little is a String
%%  representation of the Prolog number Numby.

dl_string_to_number(Big,Little,Numby) 
  :- diffListConvert(Big,Little,Listy),
     number_codes(Numby,Listy).


%%  dl_string_to_atom(Big,Little,Adam).
%% -----------------------------------------------------
%%  Holds if the Difference List Big/Little is a String
%%  representation of the Prolog atom Adam.

dl_string_to_atom(Big,Little,Adam)
  :- diffListConvert(Big,Little,Listy),
     atom_codes(Adam,Listy).



%%%============================================================================%
%%============================================================================%%
%============================================================================%%%








%=============%%
%% PROBLEM 2.
%%%%==============================%


%%============================================================================%%
%  xs -- a wrapper function for xS.
%     INPUTS: Tree, a parse tree.
%             Sent, a sentence represented by a list.
%  Use xs(Tree, Sent) to generate a sentence (xS) and its parse tree!
%% -------------------------------------------------------------------------- %

xs(Tree, Sent) :- xS(Tree, Sent, []).

%%============================================================================%%



%%====================%%
%%     SENTENCES      %
%%====================%%======================================================%%
%  A sentence is declarative (xD), imperative (xI), or interrogative (xQ).
%% -------------------------------------------------------------------------- %

xS(Tree) --> xD(Tree).
xS(Tree) --> xI(Tree).
xS(Tree) --> xQ(Tree).

%%============================================================================%%



%%====================%%
%%    DECLARATIVES    %
%%====================%%======================================================%%
%  A declarative sentence is made up of either...
%% -------------------------------------------------------------------------- %

%% a subject (xSubj) and a predicate (xPred):
%---------------------------------------
xD(d(STree,PTree)) --> xSubj(STree,Num,Pers), xPred(PTree,_,Num,Pers).

%% two declarative independent clauses (xDC) separated by a conjunction:
%---------------------------------------
xD(d(ATree,CTree,BTree)) --> xDC(ATree), xConj(CTree), xDC(BTree).
xDC(ic(STree,PTree)) --> xSubj(STree,Num,Pers),
                         xPred(PTree,_,Num,Pers).

%%============================================================================%%



%%====================%%
%%    IMPERATIVES     %
%%====================%%======================================================%%
%  An imperative sentence is made up of either...
%% -------------------------------------------------------------------------- %

%% an optional "please" and one infinitive verb phrase (xInfVP):
%---------------------------------------
xI(i(Tree)) --> xInfVP(Tree,_).
xI(i(please,Tree)) --> [please], xInfVP(Tree,_).

%% an optional "please" and two imperative independent clauses (xIC) separated
%%  by a conjunction:
%---------------------------------------
xI(i(ATree,CTree,BTree)) --> xIC(ATree), xConj(CTree), xIC(BTree).
xI(i(please,ATree,CTree,BTree)) --> [please],
                                    xIC(ATree), xConj(CTree), xIC(BTree).
xIC(ic(Tree))--> xInfVP(Tree,_).

%%============================================================================%%



%%====================%%
%%   INTERROGATIVES   %
%%====================%%======================================================%%
%  An interrogative sentence is made up of a question helper phrase (xQP), a
%   subject (xSubj), and an infinitive verb phrase (xInfVP).
%% -------------------------------------------------------------------------- %

xQ(q(QTree,STree,ITree)) --> xQP(QTree,_,Num,Pers),
                             xSubj(STree,Num,Pers), xInfVP(ITree,_).

%%============================================================================%%



%%====================%%
%%      SUBJECTS      %
%%====================%%======================================================%%
%  A subject is made up of either...
%% -------------------------------------------------------------------------- %

%% a noun phrase (xNP):
%---------------------------------------
xSubj(Tree,Num,Pers) --> xNP(Tree,Num,Pers).

%% a subject pronoun (xPronoun):
%---------------------------------------
xSubj(Tree,Num,Pers) --> xPronoun(Tree,Num,Pers).

%%============================================================================%%



%%====================%%
%%   NOUN PHRASES     %
%%====================%%======================================================%%
%  A noun phrase is made up of either...
%% -------------------------------------------------------------------------- %

%% an optional adjective phrase (xAP) and a proper noun (xPropNoun):
%---------------------------------------
xNP(np(Tree),Num,Pers) --> xPropNoun(Tree,Num,Pers).
xNP(np(ATree,NTree),Num,Pers) --> xAP(ATree),
                                  xPropNoun(NTree,Num,Pers).

%% a determiner (xDet), an optional adjective phrase (xAP), and a noun (xNoun):
%---------------------------------------
xNP(np(DTree,ATree,NTree),Num,Pers) --> xDet(DTree,Num,Pers), xAP(ATree),
                                        xNoun(NTree,Num,Pers).
xNP(np(DTree,NTree),Num,Pers) --> xDet(DTree,Num,Pers), xNoun(NTree,Num,Pers).

%% Plural nouns do not require determiners.
%---------------------------------------
xNP(np(Tree),plural,Pers) --> xNoun(Tree,plural,Pers).
xNP(np(ATree,NTree),plural,Pers) --> xAP(ATree), xNoun(NTree,plural,Pers).

%%============================================================================%%



%%====================%%
%%     PREDICATES     %
%%====================%%======================================================%%
%  A predicate is made up of either...
%% -------------------------------------------------------------------------- %

%% an optional adverbial phrase (xAdvP) and a standard verb phrase (xVP):
%---------------------------------------
xPred(pred(Tree),Tens,Num,Pers) --> xVP(Tree,Tens,Num,Pers).
xPred(pred(ATree,VTree),Tens,Num,Pers) --> xAdvP(ATree),
                                           xVP(VTree,Tens,Num,Pers).
xPred(pred(VTree,ATree),Tens,Num,Pers) --> xVP(VTree,Tens,Num,Pers),
                                           xAdvP(ATree).

%% a "to be" verb phrase (xTBVP):
%---------------------------------------
xPred(pred(Tree),Tens,Num,Pers) --> xTBVP(Tree,Tens,Num,Pers).

%%====================%%
%%    VERB PHRASES    %
%%====================%%======================================================%%
%  A standard verb phrase is made up of either...
%% -------------------------------------------------------------------------- %

%% an intransitive verb (xIVerb):
%---------------------------------------
xVP(vp(Tree),Tens,Num,Pers) --> xIVerb(Tree,Tens,Num,Pers).

%% an intransitive verb (xIVerb) with a prepositional phrase (xPP):
%---------------------------------------
xVP(vp(VTree,PTree),Tens,Num,Pers) --> xIVerb(VTree,Tens,Num,Pers), xPP(PTree).

%% a transitive verb (xTVerb), an object (xObj), and an optional prepositional
%%  phrase (xPP):
%---------------------------------------
xVP(vp(VTree,OTree),Tens,Num,Pers) --> xTVerb(VTree,Tens,Num,Pers), xObj(OTree).
xVP(vp(VTree,OTree,PTree),Tens,Num,Pers) --> xTVerb(VTree,Tens,Num,Pers),
                                             xObj(OTree), xPP(PTree).

%% -------------------------------------------------------------------------- %
%  A "to be" verb phrase is made up of either...
%% -------------------------------------------------------------------------- %

%% a "to be" verb (xTBVerb) and an object (xObj):
%---------------------------------------
xTBVP(vp(VTree,OTree),Tens,Num,Pers) --> xTBVerb(VTree,Tens,Num,Pers),
                                         xObj(OTree).

%% a "to be" verb (xTBVerb) and an adjective phrase (xAP):
%---------------------------------------
xTBVP(vp(VTree,ATree),Tens,Num,Pers) --> xTBVerb(VTree,Tens,Num,Pers),
                                         xAP(ATree).


%% -------------------------------------------------------------------------- %
%  An infinitive verb phrase is made up of either...
%% -------------------------------------------------------------------------- %

%% an infinitive verb (xInfVerb):
%---------------------------------------
xInfVP(vp(Tree),intran) --> xInfVerb(Tree,intran).

%% an infinitive verb (xInfVerb) and a prepositional phrase (xPP):
%---------------------------------------
xInfVP(vp(VTree,PTree),intran) --> xInfVerb(VTree,intran), xPP(PTree).

%% an infinitive verb (xInfVerb) and an object (xObj):
%---------------------------------------
xInfVP(vp(VTree,OTree),tran) --> xInfVerb(VTree,tran),xObj(OTree).

%%============================================================================%%



%%=======================%%
%% PREPOSITIONAL PHRASES %
%%=======================%%===================================================%%
%  A prepositional phrase is made up of a preposition (xPrep) and an
%   object (xObj).
%% -------------------------------------------------------------------------- %

xPP(pp(PTree,OTree)) --> xPrep(PTree), xObj(OTree).

%%============================================================================%%



%%====================%%
%%       OBJECTS      %
%%====================%%======================================================%%
%  An object is made up of either...
%% -------------------------------------------------------------------------- %

%% A noun phrase (xNP):
%---------------------------------------
xObj(Tree) --> xNP(Tree,_,_).

%% An object pronoun (xObjPronoun):
%---------------------------------------
xObj(Tree) --> xObjPronoun(Tree).

%%============================================================================%%



%%====================%%
%%  ADJECTIVE PHRASES %
%%====================%%======================================================%%
%  An adjective phrase is made up of either...
%% -------------------------------------------------------------------------- %

%% An optional adverb that modifies an adjective (xAdv) and an
%%  adjective (xAdj):
%---------------------------------------
xAP(ap(Tree)) --> xAdj(Tree).
xAP(ap(AdvTree,AdjTree)) --> xAdv(AdvTree,adj), xAdj(AdjTree).

%% Two adjectives (xAdj):
%---------------------------------------
xAP(ap(ATree1,ATree2)) --> xAdj(ATree1), xAdj(ATree2).

%%============================================================================%%



%%====================%%
%%  ADVERBIAL PHRASES %
%%====================%%======================================================%%
%  An adverbial phrase is made up of an adverb that can modify a verb.
%% -------------------------------------------------------------------------- %

xAdvP(Tree) --> xAdv(Tree,verb).

%%============================================================================%%



%%===========================%%
%%  QUESTION HELPER PHRASES  %
%%===========================%%===============================================%%
%  A question helper phrase is made up of an optional question word (xQW) and
%   a question helper (xHelper).
%% -------------------------------------------------------------------------- %

xQP(qhelp(QTree,HTree),Tens,Num,Pers) --> xQW(QTree),
                                          xHelper(HTree,Tens,Num,Pers).
xQP(qhelp(Tree),Tens,Num,Pers) --> xHelper(Tree,Tens,Num,Pers).

%%============================================================================%%



%%====================%%
%%        WORDS       %
%%====================%%======================================================%%
%  Words to use!
%% -------------------------------------------------------------------------- %

%% -------------------------------------------------------------------------- %
%  Determiners (number and person specified):
%% -------------------------------------------------------------------------- %
xDet(det(a),singular,third) --> [a].
xDet(det(that),singular,third) --> [that].
xDet(det(the),_,third) --> [the].
xDet(det(some),_,third) --> [some].
xDet(det(many),plural,third) --> [many].
xDet(det(those),plural,third) --> [those].

%% -------------------------------------------------------------------------- %
%  Nouns (number and person specified):
%% -------------------------------------------------------------------------- %
xNoun(n(woman),singular,third) --> [woman].
xNoun(n(women),plural,third) --> [women].
xNoun(n(man),singular,third) --> [man].
xNoun(n(men),plural,third) --> [men].
xNoun(n(bureaucrat),singular,third) --> [bureaucrat].
xNoun(n(bureaucrats),plural,third) --> [bureaucrats].
xNoun(n(clerk),singular,third) --> [clerk].
xNoun(n(clerks),plural,third) --> [clerks].
xNoun(n(nurse),singular,third) --> [nurse].
xNoun(n(nurses),plural,third) --> [nurses].

%% -------------------------------------------------------------------------- %
%  Proper Nouns (number and person specified):
%% -------------------------------------------------------------------------- %
xPropNoun(pn(april,ludgate),singular,third) --> [april,ludgate].
xPropNoun(pn(andy,dwyer),singular,third) --> [andy,dwyer].
xPropNoun(pn(ron,swanson),singular,third) --> [ron,swanson].
xPropNoun(pn(leslie,knope),singular,third) --> [leslie,knope].
xPropNoun(pn(ben,wyatt),singular,third) --> [ben,wyatt].

%% -------------------------------------------------------------------------- %
%  Subject Pronouns (number and person specified):
%% -------------------------------------------------------------------------- %
xPronoun(p(you),_,second) --> [you].
xPronoun(p(i),singular,first) --> [i].
xPronoun(p(we),plural,first) --> [we].
xPronoun(p(they),plural,third) --> [they].
xPronoun(p(she),singular,third) --> [she].
xPronoun(p(he),singular,third) --> [he].

%% -------------------------------------------------------------------------- %
%  Object Pronouns:
%% -------------------------------------------------------------------------- %
xObjPronoun(p(us)) --> [us].
xObjPronoun(p(me)) --> [me].
xObjPronoun(p(him)) --> [him].
xObjPronoun(p(her)) --> [her].
xObjPronoun(p(them)) --> [them].
xObjPronoun(p(you)) --> [you].

%% -------------------------------------------------------------------------- %
%  Prepositions:
%% -------------------------------------------------------------------------- %
xPrep(by) --> [by].
xPrep(behind) --> [behind].
xPrep(around) --> [around].

%% -------------------------------------------------------------------------- %
%  Verbs (tense, number, and person specified):
%% -------------------------------------------------------------------------- %

%% "TO BE" VERBS:
%---------------------------------------
xTBVerb(am,present,singular,first) --> [am].
xTBVerb(are,present,singular,second) --> [are].
xTBVerb(is,present,singular,third) --> [is].
xTBVerb(are,present,plural,_) --> [are].

xTBVerb(was,past,singular,first) --> [was].
xTBVerb(were,past,singular,second) --> [were].
xTBVerb(was,past,singular,third) --> [was].
xTBVerb(were,past,plural,_) --> [were].


%% INTRANSITIVE VERBS:
%---------------------------------------
xIVerb(run,present,singular,first) --> [run].
xIVerb(run,present,singular,second) --> [run].
xIVerb(runs,present,singular,third) --> [runs].
xIVerb(run,present,plural,_) --> [run].
xIVerb(ran,past,_,_) --> [ran].

xIVerb(frown,present,singular,first) --> [frown].
xIVerb(frown,present,singular,second) --> [frown].
xIVerb(frowns,present,singular,third) --> [frowns].
xIVerb(frown,present,plural,_) --> [frown].
xIVerb(frowned,past,_,_) --> [frowned].

xIVerb(sneeze,present,singular,first) --> [sneeze].
xIVerb(sneeze,present,singular,second) --> [sneeze].
xIVerb(sneezes,present,singular,third) --> [sneezes].
xIVerb(sneeze,present,plural,_) --> [sneeze].
xIVerb(sneezed,past,_,_) --> [sneezed].

%% Intransitive verbs can also be made of a "to be" verb (xTBVerb) and an
%%  intransitive participle (xPart):
%---------------------------------------
xIVerb(part(VTree,PTree),Tens,Num,Pers) --> xTBVerb(VTree,Tens,Num,Pers),
                                            xPart(PTree,intran).


%% TRANSITIVE VERBS:
%---------------------------------------
xTVerb(hug,present,singular,first) --> [hug].
xTVerb(hug,present,singular,second) --> [hug].
xTVerb(hugs,present,singular,third) --> [hugs].
xTVerb(hug,present,plural,_) --> [hug].
xTVerb(hugged,past,_,_) --> [hugged].

xTVerb(kiss,present,singular,first) --> [kiss].
xTVerb(kiss,present,singular,second) --> [kiss].
xTVerb(kisses,present,singular,third) --> [kisses].
xTVerb(kiss,present,plural,_) --> [kiss].
xTVerb(kissed,past,_,_) --> [kissed].

xTVerb(help,present,singular,first) --> [help].
xTVerb(help,present,singular,second) --> [help].
xTVerb(helps,present,singular,third) --> [helps].
xTVerb(help,present,plural,_) --> [help].
xTVerb(helped,past,_,_) --> [helped].

%% Transitive verbs can also be made of a "to be" verb (xTBVerb) and a
%%  transitive participle (xPart):
%---------------------------------------
xTVerb(part(VTree,PTree),Tens,Num,Pers) --> xTBVerb(VTree,Tens,Num,Pers),
                                            xPart(PTree,tran).


%% INFINITIVE VERBS:
%---------------------------------------
xInfVerb(run,intran) --> [run].
xInfVerb(frown,intran) --> [frown].
xInfVerb(sneeze,intran) --> [sneeze].
xInfVerb(hug,tran) --> [hug].
xInfVerb(kiss,tran) --> [kiss].
xInfVerb(help,tran) --> [help].


%% PARTICIPLES:
%---------------------------------------
xPart(running,intran) --> [running].
xPart(frowning,intran) --> [frowning].
xPart(sneezing,intran) --> [sneezing].
xPart(hugging,tran) --> [hugging].
xPart(kissing,tran) --> [kissing].
xPart(helping,tran) --> [helping].


%% -------------------------------------------------------------------------- %
%  Question Helpers (tense, number, and person specified):
%% -------------------------------------------------------------------------- %
xHelper(do,present,singular,first) --> [do].
xHelper(do,present,singular,second) --> [do].
xHelper(does,present,singular,third) --> [does].
xHelper(do,present,plural,_) --> [do].
xHelper(did,past,_,_) --> [did].

%% -------------------------------------------------------------------------- %
%  Question Words:
%% -------------------------------------------------------------------------- %
xQW(where) --> [where].
xQW(when) --> [when].
xQW(why) --> [why].
xQW(how) --> [how].

%% -------------------------------------------------------------------------- %
%  Conjunctions:
%% -------------------------------------------------------------------------- %
xConj(conj(and)) --> [and].
xConj(conj(or)) --> [or].
xConj(conj(but)) --> [but].

%% -------------------------------------------------------------------------- %
%  Adjectives:
%% -------------------------------------------------------------------------- %
xAdj(adj(cute)) --> [cute].
xAdj(adj(splendid)) --> [splendid].
xAdj(adj(funny)) --> [funny].
xAdj(adj(dumb)) --> [dumb].

%% -------------------------------------------------------------------------- %
%  Adverbs (modifiable part of speech specified):
%% -------------------------------------------------------------------------- %
xAdv((adv(rapidly)), verb) --> [rapidly].
xAdv((adv(noisily)), verb) --> [noisily].
xAdv((adv(very)), adj) --> [very].
xAdv((adv(really)), adj) --> [quite].
xAdv((adv(gracefully)), _) --> [gracefully].
xAdv((adv(naturally)), _) --> [naturally].

%%============================================================================%%


